[gd_scene load_steps=12 format=3 uid="uid://bepxjqhida0n8"]

[ext_resource type="Theme" uid="uid://co40pijjc7hbw" path="res://style/roadRogue.tres" id="1_gduxt"]
[ext_resource type="StyleBox" uid="uid://dl1e0qtgp13cj" path="res://style/style_box_basic.tres" id="1_w5jvw"]
[ext_resource type="StyleBox" uid="uid://bbchkiamfyybx" path="res://style/style_box_basic_hover.tres" id="2_1brjr"]
[ext_resource type="Script" path="res://scene/player/ui/roadButton.gd" id="2_itot7"]
[ext_resource type="AudioStream" uid="uid://bnkmb47rln87k" path="res://sound/ui/click_2.wav" id="3_qg3fx"]
[ext_resource type="AudioStream" uid="uid://bmxxnqvrvdch4" path="res://sound/ui/click.wav" id="4_fec5q"]
[ext_resource type="Material" uid="uid://d4nw1uchte7mv" path="res://scene/player/menu/main/3dText_Common.tres" id="7_pmy3v"]

[sub_resource type="Shader" id="Shader_a0oxw"]
code = "shader_type canvas_item;

//from https://godotshaders.com/shader/cool-3d-text/

render_mode blend_premul_alpha;

uniform float angle = -0.2;
uniform float thickness : hint_range(0.0, 64.0) = 10.0;
uniform float scale = 1.0;
uniform vec2 shear = vec2(0.0, -0.4);
uniform int slices = 16;
uniform bool outline = true;
uniform float outline_width : hint_range(0.0, 5.0) = 2.0;

uniform sampler2D front_tex : hint_default_white, repeat_disable;
uniform sampler2D back_tex : hint_default_white, repeat_disable;
uniform sampler2D side_tex : hint_default_black, repeat_disable;
uniform sampler2D outline_tex : hint_default_black, repeat_disable;

group_uniforms debug;
uniform bool show_bound = false;

float box(vec2 p, vec2 d){
	p = abs(p) - d;
	return max(p.x, p.y);
}

varying vec2 vertex_base;
varying flat vec2 glyph_position;
varying vec2 padding;
varying vec4 my_modulate;
void vertex() {
	// Magic :)
	vertex_base = vec2(float(VERTEX_ID>>1), float(6>>VERTEX_ID&1));
	glyph_position = UV;

	// Extend bounds
	padding = (vertex_base*2.0-1.0) * abs(shear) * thickness * 0.5;
	padding += (vertex_base*2.0-1.0) * outline_width;
	VERTEX.xy += padding;
	padding *= TEXTURE_PIXEL_SIZE;

	// Give me access to MODULATE
	my_modulate = COLOR;
}

void transformRay(inout vec3 p, inout vec3 rd, float _angle, float _scale, vec2 _shear){
	// Apply scale
	p.xy /= _scale;

	// Apply shear
	p.xy += p.z * _shear;
	rd.xy += rd.z * _shear;

	_angle = clamp( _angle * sin(TIME) , 0.0 ,100000);
	
	// Apply rotation
	mat2 R = mat2(vec2(cos(_angle),sin(_angle)),vec2(-sin(_angle),cos(_angle)));
	p.xz *= R;
	rd.xz *= R;
}

// complex number math
vec2 cmul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }
float getOutline(sampler2D tex, vec2 p, vec2 offset_px, vec2 clip_center, vec2 clip_size){
	float opacity = 0.0;

	for(int i = 0; i < 8; i++){
		float samp = texture(tex, p + offset_px).a;
		samp *= float(box(p + offset_px - clip_center, clip_size) < 0.0); // Clipping

		opacity = max(opacity, samp);

		offset_px = cmul(vec2(1.0/sqrt(2.0)), offset_px);
	}

	return opacity;
}

void fragment(){
	vec2 glyph_size = (UV - glyph_position)/vertex_base;
	vec2 glyph_center = glyph_position + glyph_size/2.0;

	vec3 p = vec3(UV + padding, 0); // A point in the font atlas, with padded bounds
	vec3 rd = vec3(0, 0, -1); // Ray points back to front

	// Inversly transform the ray
	p.xy -= glyph_center;
	transformRay(p, rd, angle, scale, shear);
	p.xy += glyph_center;


	// Intersect xy plane
	rd /= abs(rd.z);
	p -= rd * rd.z * p.z;

	// Thickness is measured in pixels. Hopefully the texture is predictable
	rd *= thickness * TEXTURE_PIXEL_SIZE.x;

	// Find back slice
	p -= rd * 0.5;

	// Prepare for ray march
	rd /= float(slices - 1);

	COLOR = vec4(0,0,0,0);

	// Add back outline
	if(outline){
		float opacity = getOutline(TEXTURE, p.xy, sign(shear) * TEXTURE_PIXEL_SIZE * outline_width, glyph_center, glyph_size/2.0);
		vec4 col = vec4(texture(outline_tex, vertex_base).rgb * opacity, opacity);
		col *= my_modulate;
		COLOR = COLOR + col * (1.0 - COLOR.a); // premultiplied alpha under operator*/
	}

	for(int i = 0; i<slices; i++){
		vec4 samp = texture(TEXTURE, p.xy);
		samp.a *= float(box(p.xy - glyph_center, glyph_size/2.0) < 0.0); // Clipping

		if(i < slices-1) {
			samp.rgb = texture(side_tex, vertex_base).rgb;
		}
		else if(rd.z < 0.0) {
			samp.rgb = texture(front_tex, vertex_base).rgb;
		}
		else {
			samp.rgb = texture(back_tex, vertex_base).rgb;
		}

		samp *= my_modulate;
		samp.rgb *= samp.a; // premultiply alpha
		COLOR = samp + COLOR * (1.0 - samp.a); // premultiplied alpha over operator

		// March to the next slice
		p += rd;
	}

	// Unmarch it back. Kinda lazy
	p -= rd;

	// Add front outline
	if(outline){
		float opacity = getOutline(TEXTURE, p.xy, sign(shear) * TEXTURE_PIXEL_SIZE * outline_width, glyph_center, glyph_size/2.0);
		vec4 col = vec4(texture(outline_tex, vertex_base).rgb * opacity, opacity);
		col *= my_modulate;
		COLOR = COLOR + col * (1.0 - COLOR.a); // premultiplied alpha under operator*/
	}

	if(show_bound){
		COLOR.a = COLOR.a * 0.8 + 0.2;

		float b = box(vertex_base-0.5, vec2(0.5));
		COLOR.g += (1.0 - clamp(abs(b/fwidth(b) + 0.5), 0.0, 1.0));
	}
	
}"

[sub_resource type="Gradient" id="Gradient_i0jlm"]
offsets = PackedFloat32Array(0)
colors = PackedColorArray(0, 0, 0, 0.52549)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_p8ylb"]
gradient = SubResource("Gradient_i0jlm")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_v7iif"]
resource_local_to_scene = true
shader = SubResource("Shader_a0oxw")
shader_parameter/angle = 0.5
shader_parameter/thickness = 5.0
shader_parameter/scale = 1.0
shader_parameter/shear = Vector2(0, -0.2)
shader_parameter/slices = 32
shader_parameter/outline = true
shader_parameter/outline_width = 1.0
shader_parameter/outline_tex = SubResource("GradientTexture1D_p8ylb")
shader_parameter/show_bound = false

[node name="RoadButton" type="Button"]
custom_minimum_size = Vector2(0, 25)
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("1_gduxt")
theme_override_font_sizes/font_size = 30
theme_override_styles/normal = ExtResource("1_w5jvw")
theme_override_styles/hover = ExtResource("2_1brjr")
theme_override_styles/pressed = ExtResource("2_1brjr")
theme_override_styles/focus = ExtResource("2_1brjr")
text = "fdf"
alignment = 0
script = ExtResource("2_itot7")

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("3_qg3fx")
volume_db = 4.0
bus = &"UI"

[node name="AudioStreamPlayer2" type="AudioStreamPlayer" parent="."]
stream = ExtResource("4_fec5q")
bus = &"UI"

[node name="HBoxContainer" type="HBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -10.0
offset_top = -21.5
offset_right = 6.0
offset_bottom = 17.5
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 15

[node name="TextureRect" type="TextureRect" parent="HBoxContainer"]
material = SubResource("ShaderMaterial_v7iif")
layout_mode = 2
size_flags_horizontal = 6
size_flags_vertical = 4

[node name="Label" type="Label" parent="HBoxContainer"]
material = ExtResource("7_pmy3v")
layout_mode = 2
size_flags_horizontal = 6
theme_override_font_sizes/font_size = 30

[connection signal="focus_entered" from="." to="." method="_on_focus_entered"]
[connection signal="focus_exited" from="." to="." method="_on_focus_exited"]
[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_mouse_exited"]
[connection signal="pressed" from="." to="." method="_on_pressed"]
