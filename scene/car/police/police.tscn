[gd_scene load_steps=32 format=3 uid="uid://dfqbeth5jspt5"]

[ext_resource type="PackedScene" uid="uid://dbkp41oxg03o6" path="res://scene/car/car.tscn" id="1_qtyvp"]
[ext_resource type="Texture2D" uid="uid://disw6kafapd1m" path="res://scene/car/police/Police.png" id="2_7cb7w"]
[ext_resource type="Texture2D" uid="uid://bfou1crov3m1f" path="res://scene/car/police/char_police.png" id="2_hmbi1"]
[ext_resource type="AudioStream" uid="uid://bs5u6ldb1k1ko" path="res://scene/car/police/audio/police_intro_1.mp3" id="3_iw1cs"]
[ext_resource type="Texture2D" uid="uid://bialbejgyaaqo" path="res://scene/car/police/police_background_unedited.png" id="3_wde7i"]
[ext_resource type="AudioStream" uid="uid://dvypnkd1hbu0y" path="res://scene/car/police/audio/police_intro_2.mp3" id="4_i3uqm"]
[ext_resource type="AudioStream" uid="uid://c5tvsajagayf2" path="res://scene/car/police/audio/police_intro_3.mp3" id="5_kj4sh"]
[ext_resource type="AudioStream" uid="uid://dwna60l4rv2tu" path="res://scene/car/police/audio/police_intro_4.mp3" id="6_7lced"]
[ext_resource type="AudioStream" uid="uid://bqvio43px1fh" path="res://scene/car/police/audio/police_intro_5.mp3" id="7_fn2fs"]
[ext_resource type="AudioStream" uid="uid://bpdb8jguevfuk" path="res://scene/car/police/audio/police_intro_6.mp3" id="8_qb8pj"]
[ext_resource type="AudioStream" uid="uid://bfdhnb3ug7pau" path="res://scene/car/police/audio/police_intro_7.mp3" id="9_rcvls"]
[ext_resource type="AudioStream" uid="uid://csj5cc0mio728" path="res://scene/car/police/audio/police_intro_8.mp3" id="10_ovhbp"]
[ext_resource type="PackedScene" uid="uid://551dlp73phd4" path="res://texture/animation/smoke.tscn" id="12_7x7a1"]
[ext_resource type="AudioStream" uid="uid://b176tatlnxn8c" path="res://scene/car/police/audio/police_purse_1.mp3" id="12_luba8"]
[ext_resource type="AudioStream" uid="uid://dxagtqok5gsrl" path="res://scene/car/police/audio/police_purse_2.mp3" id="13_iy7il"]
[ext_resource type="AudioStream" uid="uid://cs4dentfg7qc7" path="res://scene/car/police/audio/police_joy_1.mp3" id="14_plabd"]
[ext_resource type="AudioStream" uid="uid://cjbnlyxj5jcmp" path="res://scene/car/police/audio/police_joy_2.mp3" id="15_5gtnk"]
[ext_resource type="AudioStream" uid="uid://byw7acj43k2pg" path="res://scene/car/police/audio/police_joy_3.mp3" id="16_ysue5"]
[ext_resource type="AudioStream" uid="uid://bpht0pol7w6m8" path="res://scene/car/police/audio/police_joy_4.mp3" id="17_uowxg"]
[ext_resource type="AudioStream" uid="uid://dox5jqujx16n5" path="res://scene/car/police/audio/police_joy_5.mp3" id="18_sv8qh"]
[ext_resource type="AudioStream" uid="uid://cvxn7uqseauoh" path="res://scene/car/police/audio/police_joy_6.mp3" id="19_r6pp2"]
[ext_resource type="AudioStream" uid="uid://cwtiiermrjqr0" path="res://scene/car/police/audio/police_joy_7.mp3" id="20_vqm56"]
[ext_resource type="AudioStream" uid="uid://dd4epqpblbyxi" path="res://scene/car/police/audio/police_joy_8.mp3" id="21_m8mgj"]
[ext_resource type="AudioStream" uid="uid://bjpcy11ghhhty" path="res://scene/car/police/audio/police_joy_9.mp3" id="22_1c7ex"]
[ext_resource type="AudioStream" uid="uid://d1rimkqcwdpju" path="res://scene/car/police/audio/police_joy_10_intro.mp3" id="23_5mtr0"]
[ext_resource type="AudioStream" uid="uid://dtr78i8cwyxby" path="res://scene/car/police/audio/police_fuelwarning_1.mp3" id="24_lto2g"]
[ext_resource type="AudioStream" uid="uid://cy23vr0ymlxov" path="res://scene/car/police/audio/police_fuelwarning_2.mp3" id="25_bxqdy"]
[ext_resource type="AudioStream" uid="uid://c8inbeyiwnvwh" path="res://scene/car/police/audio/police_healthwarning_1.mp3" id="26_iuik3"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_cwfv8"]
size = Vector2(174, 77)

[sub_resource type="Shader" id="Shader_cuftc"]
resource_local_to_scene = true
code = "shader_type canvas_item;

//from https://godotshaders.com/shader/cool-3d-text/

render_mode blend_premul_alpha;

uniform float angle = -0.2;
uniform float thickness : hint_range(0.0, 64.0) = 10.0;
uniform float scale = 1.0;
uniform vec2 shear = vec2(0.0, -0.4);
uniform int slices = 16;
uniform bool outline = true;
uniform float outline_width : hint_range(0.0, 5.0) = 2.0;

uniform sampler2D front_tex : hint_default_white, repeat_disable;
uniform sampler2D back_tex : hint_default_white, repeat_disable;
uniform sampler2D side_tex : hint_default_black, repeat_disable;
uniform sampler2D outline_tex : hint_default_black, repeat_disable;

group_uniforms debug;
uniform bool show_bound = false;

float box(vec2 p, vec2 d){
	p = abs(p) - d;
	return max(p.x, p.y);
}

varying vec2 vertex_base;
varying flat vec2 glyph_position;
varying vec2 padding;
varying vec4 my_modulate;
void vertex() {
	// Magic :)
	vertex_base = vec2(float(VERTEX_ID>>1), float(6>>VERTEX_ID&1));
	glyph_position = UV;

	// Extend bounds
	padding = (vertex_base*2.0-1.0) * abs(shear) * thickness * 0.5;
	padding += (vertex_base*2.0-1.0) * outline_width;
	VERTEX.xy += padding;
	padding *= TEXTURE_PIXEL_SIZE;

	// Give me access to MODULATE
	my_modulate = COLOR;
}

void transformRay(inout vec3 p, inout vec3 rd, float _angle, float _scale, vec2 _shear){
	// Apply scale
	p.xy /= _scale;

	// Apply shear
	p.xy += p.z * _shear;
	rd.xy += rd.z * _shear;

	_angle = clamp( _angle * sin(TIME *2.0 ) , -1000000 ,100000);
	
	// Apply rotation
	mat2 R = mat2(vec2(cos(_angle),sin(_angle)),vec2(-sin(_angle),cos(_angle)));
	p.xz *= R;
	rd.xz *= R;
}

// complex number math
vec2 cmul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }
float getOutline(sampler2D tex, vec2 p, vec2 offset_px, vec2 clip_center, vec2 clip_size){
	float opacity = 0.0;

	for(int i = 0; i < 8; i++){
		float samp = texture(tex, p + offset_px).a;
		samp *= float(box(p + offset_px - clip_center, clip_size) < 0.0); // Clipping

		opacity = max(opacity, samp);

		offset_px = cmul(vec2(1.0/sqrt(2.0)), offset_px);
	}

	return opacity;
}

void fragment(){
	vec2 glyph_size = (UV - glyph_position)/vertex_base;
	vec2 glyph_center = glyph_position + glyph_size/2.0;

	vec3 p = vec3(UV + padding, 0); // A point in the font atlas, with padded bounds
	vec3 rd = vec3(0, 0, -1); // Ray points back to front

	// Inversly transform the ray
	p.xy -= glyph_center;
	transformRay(p, rd, angle, scale, shear);
	p.xy += glyph_center;


	// Intersect xy plane
	rd /= abs(rd.z);
	p -= rd * rd.z * p.z;

	// Thickness is measured in pixels. Hopefully the texture is predictable
	rd *= thickness * TEXTURE_PIXEL_SIZE.x;

	// Find back slice
	p -= rd * 0.5;

	// Prepare for ray march
	rd /= float(slices - 1);

	COLOR = vec4(0,0,0,0);

	// Add back outline
	if(outline){
		float opacity = getOutline(TEXTURE, p.xy, sign(shear) * TEXTURE_PIXEL_SIZE * outline_width, glyph_center, glyph_size/2.0);
		vec4 col = vec4(texture(outline_tex, vertex_base).rgb * opacity, opacity);
		col *= my_modulate;
		COLOR = COLOR + col * (1.0 - COLOR.a); // premultiplied alpha under operator*/
	}

	for(int i = 0; i<slices; i++){
		vec4 samp = texture(TEXTURE, p.xy);
		samp.a *= float(box(p.xy - glyph_center, glyph_size/2.0) < 0.0); // Clipping

		if(i < slices-1) {
			samp.rgb = texture(side_tex, vertex_base).rgb;
		}
		else if(rd.z < 0.0) {
			samp.rgb = texture(front_tex, vertex_base).rgb;
		}
		else {
			samp.rgb = texture(back_tex, vertex_base).rgb;
		}

		samp *= my_modulate;
		samp.rgb *= samp.a; // premultiply alpha
		COLOR = samp + COLOR * (1.0 - samp.a); // premultiplied alpha over operator

		// March to the next slice
		p += rd;
	}

	// Unmarch it back. Kinda lazy
	p -= rd;

	// Add front outline
	if(outline){
		float opacity = getOutline(TEXTURE, p.xy, sign(shear) * TEXTURE_PIXEL_SIZE * outline_width, glyph_center, glyph_size/2.0);
		vec4 col = vec4(texture(outline_tex, vertex_base).rgb * opacity, opacity);
		col *= my_modulate;
		COLOR = COLOR + col * (1.0 - COLOR.a); // premultiplied alpha under operator*/
	}

	if(show_bound){
		COLOR.a = COLOR.a * 0.8 + 0.2;

		float b = box(vertex_base-0.5, vec2(0.5));
		COLOR.g += (1.0 - clamp(abs(b/fwidth(b) + 0.5), 0.0, 1.0));
	}
	
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_otm45"]
resource_local_to_scene = true
shader = SubResource("Shader_cuftc")
shader_parameter/angle = 0.6
shader_parameter/thickness = 5.0
shader_parameter/scale = 1.0
shader_parameter/shear = Vector2(0, -0.2)
shader_parameter/slices = 16
shader_parameter/outline = true
shader_parameter/outline_width = 2.0
shader_parameter/show_bound = false

[node name="Car" instance=ExtResource("1_qtyvp")]
engine = 35
steering = 25
traction = 25
armor = 40
oil = 10
headlights = 40
profilePic = ExtResource("2_hmbi1")
backgroundPic = ExtResource("3_wde7i")
charName = "Nikita"
carId = "police"
introAudio = Array[AudioStreamMP3]([ExtResource("3_iw1cs"), ExtResource("4_i3uqm"), ExtResource("5_kj4sh"), ExtResource("6_7lced"), ExtResource("7_fn2fs"), ExtResource("8_qb8pj"), ExtResource("9_rcvls"), ExtResource("10_ovhbp")])
purseAudio = Array[AudioStreamMP3]([ExtResource("12_luba8"), ExtResource("13_iy7il")])
powerupAudio = Array[AudioStreamMP3]([ExtResource("14_plabd"), ExtResource("15_5gtnk"), ExtResource("16_ysue5"), ExtResource("17_uowxg"), ExtResource("18_sv8qh"), ExtResource("19_r6pp2"), ExtResource("20_vqm56"), ExtResource("21_m8mgj"), ExtResource("22_1c7ex"), ExtResource("23_5mtr0")])
lowGasAudio = Array[AudioStreamMP3]([ExtResource("24_lto2g"), ExtResource("25_bxqdy")])
lowHealthAudio = Array[AudioStreamMP3]([ExtResource("26_iuik3")])
carDamagedTexture = ExtResource("2_7cb7w")

[node name="CollisionShape2D" parent="." index="2"]
polygon = PackedVector2Array(-31, -48.5, -1, -46.5, 16, -33.5, 33, -12.5, 34, 13.5, 21, 31.5, 5, 45.5, -31, 47.5)

[node name="CollisionShape2D_rear" parent="." index="3"]
polygon = PackedVector2Array(-30, -30.5, -5, -43.5, -4, 47.5, -21, 40.5, -33, 27.5, -36, -1.5)

[node name="sprite" parent="." index="5"]
texture = ExtResource("2_7cb7w")

[node name="Smoke2" parent="sprite/exhaust" index="1" instance=ExtResource("12_7x7a1")]
position = Vector2(-23.9996, 109)

[node name="CollisionShape2D" parent="carBodyArea" index="0"]
position = Vector2(-5, -2.5)
shape = SubResource("RectangleShape2D_cwfv8")

[node name="Label" parent="indicator" index="0"]
material = SubResource("ShaderMaterial_otm45")

[node name="indicatorDistance" parent="indicator/Label/indicatorRoot" index="0"]
material = SubResource("ShaderMaterial_otm45")
